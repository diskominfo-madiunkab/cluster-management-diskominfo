name: Deploy Rancher (Cloudflare+NPM â†’ Ingress TLS internal)

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/deploy-rancher.yml"
  workflow_dispatch:
    inputs:
      rancher_hostname:
        description: "Domain Rancher (contoh: k8s.madiunkab.go.id)"
        required: true
        default: "k8s.madiunkab.go.id"
      ingress_class:
        description: "Ingress class (nginx/traefik/haproxy, dll.)"
        required: true
        default: "nginx"
      ingress_namespace:
        description: "Namespace Ingress Controller (default: ingress-nginx)"
        required: true
        default: "ingress-nginx"
      rancher_version:
        description: "Chart version (atau 'latest')"
        required: true
        default: "latest"
      kube_context:
        description: "Nama context di kubeconfig"
        required: true
        default: "gha"

jobs:
  deploy-rancher:
    runs-on: ubuntu-latest
    env:
      KUBE_CONTEXT: ${{ inputs.kube_context }}
      RANCHER_HOSTNAME: ${{ inputs.rancher_hostname }}
      INGRESS_CLASS: ${{ inputs.ingress_class }}
      INGRESS_NS: ${{ inputs.ingress_namespace }}
      RANCHER_VERSION: ${{ inputs.rancher_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "latest"

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: "latest"

      - name: Install tools (jq, openssl)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq openssl

      - name: Restore KUBECONFIG
        shell: bash
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
          KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG_CONTENT }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.kube"
          if [[ -n "${KUBECONFIG_B64:-}" ]]; then
            echo "$KUBECONFIG_B64" | base64 -d > "$HOME/.kube/config"
          elif [[ -n "${KUBECONFIG_CONTENT:-}" ]]; then
            echo "$KUBECONFIG_CONTENT" > "$HOME/.kube/config"
          else
            echo "ERROR: Set secret KUBECONFIG_B64 atau KUBECONFIG_CONTENT" >&2
            exit 1
          fi
          chmod 600 "$HOME/.kube/config"
          kubectl config use-context "$KUBE_CONTEXT" || true
          echo "== kubectl client version =="; kubectl version --client=true || true
          echo "== cluster info =="; kubectl cluster-info || true
          echo "== apiserver readiness =="; kubectl get --raw=/readyz?verbose || true
          echo "== nodes =="; kubectl get nodes -o wide || true

      - name: Add Helm repo (Rancher)
        run: |
          helm repo add rancher-latest https://releases.rancher.com/server-charts/latest
          helm repo update

      - name: Ensure namespaces
        run: |
          kubectl get ns cattle-system >/dev/null 2>&1 || kubectl create ns cattle-system

      # -------------------- GUARDRAILS AWAL --------------------
      - name: Fail-open Rancher webhooks (temporary)
        shell: bash
        run: |
          set -euo pipefail
          for kind in validatingwebhookconfiguration mutatingwebhookconfiguration; do
            if kubectl get $kind rancher.cattle.io >/dev/null 2>&1; then
              count=$(kubectl get $kind rancher.cattle.io -o json | jq '.webhooks | length' || echo 0)
              for i in $(seq 0 $((count-1))); do
                kubectl patch $kind rancher.cattle.io --type='json' \
                  -p="[ \
                    {\"op\":\"replace\",\"path\":\"/webhooks/$i/failurePolicy\",\"value\":\"Ignore\"}, \
                    {\"op\":\"add\",\"path\":\"/webhooks/$i/timeoutSeconds\",\"value\":5} \
                  ]" >/dev/null 2>&1 || true
              done
            fi
          done

      - name: Fail-open ingress-nginx admission (temporary)
        shell: bash
        run: |
          set -euo pipefail
          for kind in validatingwebhookconfiguration mutatingwebhookconfiguration; do
            if kubectl get $kind ingress-nginx-admission >/dev/null 2>&1; then
              count=$(kubectl get $kind ingress-nginx-admission -o json | jq '.webhooks | length' || echo 0)
              for i in $(seq 0 $((count-1))); do
                kubectl patch $kind ingress-nginx-admission --type='json' \
                  -p="[ \
                    {\"op\":\"replace\",\"path\":\"/webhooks/$i/failurePolicy\",\"value\":\"Ignore\"}, \
                    {\"op\":\"add\",\"path\":\"/webhooks/$i/timeoutSeconds\",\"value\":5} \
                  ]" >/dev/null 2>&1 || true
              done
            fi
          done
          # Tunggu controller ready supaya admission & ingress stabil
          kubectl -n "$INGRESS_NS" wait --for=condition=ready pod -l app.kubernetes.io/component=controller --timeout=10m || true
          # Tinjau endpoints admission (kadang baru kebentuk setelah controller ready)
          kubectl -n "$INGRESS_NS" get endpoints ingress-nginx-controller-admission || true

      # -------------------- TLS BACKEND (SELF-SIGNED) --------------------
      - name: Create/Refresh self-signed TLS secret (backend Ingress)
        shell: bash
        run: |
          set -euo pipefail
          openssl req -x509 -newkey rsa:2048 -nodes -days 825 \
            -subj "/CN=${RANCHER_HOSTNAME}" \
            -keyout /tmp/tls.key -out /tmp/tls.crt
          kubectl -n cattle-system delete secret rancher-tls >/dev/null 2>&1 || true
          kubectl -n cattle-system create secret tls rancher-tls \
            --key /tmp/tls.key --cert /tmp/tls.crt

      # -------------------- INSTALL / UPGRADE RANCHER --------------------
      - name: Install/Upgrade Rancher (ingress.tls.source=secret)
        env:
          BOOTSTRAP_PASSWORD: ${{ secrets.RANCHER_BOOTSTRAP_PASSWORD }}
        shell: bash
        run: |
          set -euo pipefail
          CHART="rancher-latest/rancher"
          if [[ "${RANCHER_VERSION}" != "latest" ]]; then
            VERSION_ARG="--version ${RANCHER_VERSION}"
          else
            VERSION_ARG=""
          fi

          helm upgrade --install rancher "$CHART" \
            --namespace cattle-system ${VERSION_ARG} \
            --set hostname="${RANCHER_HOSTNAME}" \
            --set ingress.ingressClassName="${INGRESS_CLASS}" \
            --set ingress.tls.source="secret" \
            --set ingress.tls.secretName="rancher-tls" \
            --set-string ingress.extraAnnotations."nginx\.ingress\.kubernetes\.io/proxy-read-timeout"="3600" \
            --set-string ingress.extraAnnotations."nginx\.ingress\.kubernetes\.io/proxy-send-timeout"="3600" \
            --set-string ingress.extraAnnotations."nginx\.ingress\.kubernetes\.io/proxy-body-size"="200m" \
            --set-string ingress.extraAnnotations."nginx\.ingress\.kubernetes\.io/websocket-services"="rancher" \
            --set-string extraEnv[0].name="CATTLE_PROXY_REAL_IP_HEADER" \
            --set-string extraEnv[0].value="X-Forwarded-For" \
            ${BOOTSTRAP_PASSWORD:+--set bootstrapPassword="${BOOTSTRAP_PASSWORD}"} \
            --wait --timeout 30m

          echo "Waiting Rancher deployment..."
          kubectl -n cattle-system rollout status deploy/rancher --timeout=20m || (kubectl -n cattle-system get pods -o wide; false)
          kubectl -n cattle-system wait deploy/rancher-webhook --for=condition=Available --timeout=10m || true

      # -------------------- RESTORE WEBHOOKS --------------------
      - name: Restore Rancher webhooks (Fail)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          for kind in validatingwebhookconfiguration mutatingwebhookconfiguration; do
            if kubectl get $kind rancher.cattle.io >/dev/null 2>&1; then
              count=$(kubectl get $kind rancher.cattle.io -o json | jq '.webhooks | length' || echo 0)
              for i in $(seq 0 $((count-1))); do
                kubectl patch $kind rancher.cattle.io --type='json' \
                  -p="[ \
                    {\"op\":\"replace\",\"path\":\"/webhooks/$i/failurePolicy\",\"value\":\"Fail\"}, \
                    {\"op\":\"add\",\"path\":\"/webhooks/$i/timeoutSeconds\",\"value\":10} \
                  ]" >/dev/null 2>&1 || true
              done
            fi
          done

      - name: Restore ingress-nginx admission (Fail)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          for kind in validatingwebhookconfiguration mutatingwebhookconfiguration; do
            if kubectl get $kind ingress-nginx-admission >/dev/null 2>&1; then
              count=$(kubectl get $kind ingress-nginx-admission -o json | jq '.webhooks | length' || echo 0)
              for i in $(seq 0 $((count-1))); do
                kubectl patch $kind ingress-nginx-admission --type='json' \
                  -p="[ \
                    {\"op\":\"replace\",\"path\":\"/webhooks/$i/failurePolicy\",\"value\":\"Fail\"}, \
                    {\"op\":\"add\",\"path\":\"/webhooks/$i/timeoutSeconds\",\"value\":10} \
                  ]" >/dev/null 2>&1 || true
              done
            fi
          done

      # -------------------- OUTPUT RANGKUMAN --------------------
      - name: Show ingress & services (buat NPM target)
        if: ${{ always() }}
        run: |
          echo "== Ingresses =="
          kubectl get ingress -A
          echo "== Ingress Controller Service (cari LB/MetalLB IP) =="
          kubectl -n "$INGRESS_NS" get svc -o wide || true
          echo "== Rancher svc/ingress detail =="
          kubectl -n cattle-system get svc,ingress -o wide || true

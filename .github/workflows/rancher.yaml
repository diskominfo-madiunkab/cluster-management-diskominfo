name: Deploy Rancher (NodePort via NPM) - One Click

concurrency:
  group: deploy-rancher-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
    inputs:
      nodePort:
        description: "NodePort (30000-32767) untuk NPM"
        required: false
        default: "32080"
      replicas:
        description: "Jumlah replica Rancher"
        required: false
        default: "2"
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/deploy-rancher.yml"
      - "k8s/**"

env:
  NAMESPACE: cattle-system
  RELEASE: rancher
  SELECTOR_LABEL: rancher

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NODEPORT: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.nodePort || '32080' }}
      RANCHER_REPLICAS: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.replicas || '2' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Rancher secrets
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
          RANCHER_HOSTNAME: ${{ secrets.RANCHER_HOSTNAME }}
        run: |
          set -euo pipefail
          [[ -n "${KUBECONFIG_B64:-}" ]] || { echo "❌ Secret KUBECONFIG_B64 belum diset."; exit 1; }
          [[ -n "${RANCHER_HOSTNAME:-}" ]] || { echo "❌ Secret RANCHER_HOSTNAME belum diset."; exit 1; }

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.29.6

      - name: Setup helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.2

      - name: Install jq (if missing)
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: Validate client tools
        run: |
          set -euo pipefail
          kubectl version --client
          helm version --short
          jq --version

      - name: Restore kubeconfig (supports base64 atau YAML mentah)
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.kube"
          python - <<'PY'
          import base64, binascii, os, pathlib, re
          raw = os.environ.get("KUBECONFIG_B64","").strip()
          if (raw.startswith("'") and raw.endswith("'")) or (raw.startswith('"') and raw.endswith('"')):
          raw = raw[1:-1].strip()
          looks_like_b64 = re.fullmatch(r'[A-Za-z0-9+/=\s]+', raw or '') is not None and 'apiVersion' not in raw
          if not looks_like_b64 and r'\n' in raw:
          raw = raw.replace(r'\n','\n')
          target = pathlib.Path(os.environ["HOME"])/".kube"/"config"
          target.parent.mkdir(parents=True, exist_ok=True)
          content = None
        try:
          decoded = base64.b64decode(raw)
          text = decoded.decode('utf-8', errors='strict')
          if "apiVersion" in text and "clusters" in text:
              content = text
          else:
              raise ValueError("decoded payload not kubeconfig")
          except Exception:
          content = raw
          if content and not content.endswith("\n"):
          content += "\n"
          target.write_text(content)
          PY
          chmod 600 "$HOME/.kube/config"
          echo "ℹ️ Kube context:" && kubectl config current-context || true
          echo "ℹ️ Cluster info:" && kubectl cluster-info
          echo "ℹ️ Nodes:" && kubectl get nodes -o wide

      - name: Ensure namespace
        run: |
          set -euo pipefail
          kubectl get ns "$NAMESPACE" >/dev/null 2>&1 || kubectl create ns "$NAMESPACE"

      - name: Add Rancher Helm repo (+retry)
        run: |
          set -euo pipefail
          helm repo add rancher-latest https://releases.rancher.com/server-charts/latest
          for i in 1 2 3; do
            helm repo update && break || { echo "retry $i..."; sleep 3; }
          done

      - name: Pre-clean dangling failed installs
        run: |
          set -euo pipefail
          set -x
          helm ls -n "$NAMESPACE" --all --filter "^${RELEASE}$" | awk 'NR>1 {print $1}' | \
            xargs -r -I{} helm uninstall {} -n "$NAMESPACE" || true

      - name: Reserve free NodePort (or use requested)
        id: pick_port
        env:
          REQ: ${{ env.NODEPORT }}
        run: |
          set -euo pipefail
          in_use="$(kubectl get svc --all-namespaces -o json \
            | jq -r '.items[]?.spec.ports[]?.nodePort' | grep -E '^[0-9]+$' || true)"
          want="${REQ:-32080}"
          if [[ -n "$want" && "$want" =~ ^[0-9]+$ && "$want" -ge 30000 && "$want" -le 32767 ]]; then
            if echo "$in_use" | grep -Fxq "$want"; then
              echo "⚠️ NodePort $want sudah dipakai, mencari alternatif..."
            else
              echo "port=$want" >> "$GITHUB_OUTPUT"; exit 0
            fi
          fi
          for p in $(seq 32080 32767); do
            if ! echo "$in_use" | grep -Fxq "$p"; then
              echo "✅ Pakai NodePort $p"
              echo "port=$p" >> "$GITHUB_OUTPUT"; exit 0
            fi
          done
          echo "❌ Tidak menemukan NodePort kosong di range 30000-32767" >&2
          exit 1

      - name: Apply NodePort Service (inline)
        env:
          NODEPORT_FINAL: ${{ steps.pick_port.outputs.port }}
        run: |
          set -euo pipefail
          cat <<YAML | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: rancher-nodeport
            namespace: ${NAMESPACE}
            labels:
              app: rancher
          spec:
            type: NodePort
            selector:
              app: ${SELECTOR_LABEL}
            ports:
              - name: http
                port: 80
                targetPort: 80
                nodePort: ${NODEPORT_FINAL}
          YAML
          kubectl -n "$NAMESPACE" get svc rancher-nodeport -o wide

      - name: Install/Upgrade Rancher (Ingress off, TLS external)
        env:
          RANCHER_HOSTNAME: ${{ secrets.RANCHER_HOSTNAME }}
          RANCHER_REPLICAS: ${{ env.RANCHER_REPLICAS }}
        run: |
          set -euo pipefail
          helm upgrade --install "$RELEASE" rancher-latest/rancher \
            -n "$NAMESPACE" \
            --wait \
            --timeout 20m \
            --set hostname="${RANCHER_HOSTNAME}" \
            --set replicas=${RANCHER_REPLICAS} \
            --set ingress.enabled=false \
            --set tls=external

      - name: Wait rollout Rancher
        run: |
          set -euo pipefail
          kubectl -n "$NAMESPACE" rollout status deploy/rancher --timeout=10m
          kubectl -n "$NAMESPACE" get pods -o wide

      - name: Health check (API probe, no port-forward)
        run: |
          set -euo pipefail
          total=$(kubectl -n "$NAMESPACE" get pods -l app=rancher -o json \
            | jq '[.items[]?.status.containerStatuses? | length] | add')
          ready=$(kubectl -n "$NAMESPACE" get pods -l app=rancher -o json \
            | jq '[.items[]?.status.containerStatuses[]? | select(.ready==true)] | length')
          echo "Total containers: $total"
          echo "Ready containers: $ready"
          if [[ -z "${total}" || -z "${ready}" || "$total" -ne "$ready" ]]; then
            echo "❌ Rancher belum sehat."
            kubectl -n "$NAMESPACE" get pods -o wide
            kubectl -n "$NAMESPACE" logs deploy/rancher --tail=200 || true
            exit 1
          fi
          echo "✅ Rancher sehat."

      - name: Print NodeIPs + NodePort (untuk setting NPM)
        env:
          NODEPORT_FINAL: ${{ steps.pick_port.outputs.port }}
        run: |
          set -euo pipefail
          echo "== Candidate Node IPs (InternalIP) =="
          kubectl get nodes -o jsonpath='{range .items[*]}{.status.addresses[?(@.type=="InternalIP")].address}{"\t"}{.metadata.name}{"\n"}{end}'
          echo "NodePort yang aktif: ${NODEPORT_FINAL}"
          echo ""
          echo "➡️  NPM (Cloudflare -> NPM -> NodePort):"
          echo "    - Domain (Host): ${{ secrets.RANCHER_HOSTNAME }}"
          echo "    - Forward IP    : <pilih salah satu InternalIP di atas>"
          echo "    - Forward Port  : ${NODEPORT_FINAL}"
          echo "    - SSL Mode      : Full (Strict)"

      - name: Cleanup on failure
        if: failure()
        run: |
          set -euxo pipefail
          echo "🚨 Deployment gagal. Membersihkan resource terkait Rancher..."
          helm uninstall "$RELEASE" -n "$NAMESPACE" || true
          kubectl -n "$NAMESPACE" delete deploy,sts,ds,svc,ing,job,cm,secret -l app=rancher --force --grace-period=0 || true
          kubectl -n "$NAMESPACE" delete all,cm,secret -l app=rancher-webhook --force --grace-period=0 || true
          kubectl -n fleet-system delete all,cm,secret --all || true
          kubectl delete ns fleet-system --force --grace-period=0 || true
          kubectl -n "$NAMESPACE" delete svc rancher-nodeport --ignore-not-found=true || true
          kubectl get crd | awk '/fleet/ {print $1}' | xargs -r kubectl delete crd || true
          kubectl delete ns "$NAMESPACE" --force --grace-period=0 || true

name: Deploy MetalLB (L2)

on:
  workflow_dispatch:
    inputs:
      kube_context:
        description: "Nama context kubeconfig"
        required: true
        default: "gha"
      metallb_version:
        description: "Versi chart MetalLB (atau 'latest')"
        required: true
        options: ["0.14.5", "latest"]
        default: "latest"
      pool_addresses:
        description: "Alamat pool (contoh: 10.10.2.20-10.10.2.20)"
        required: true
        default: "10.10.2.20-10.10.2.20"
      pool_name:
        description: "Nama IPAddressPool"
        required: true
        default: "lb-pool-local"
      adv_name:
        description: "Nama L2Advertisement"
        required: true
        default: "l2adv-local"
      loadbalancer_ip:
        description: "IP MetalLB untuk Ingress"
        required: true
        default: "10.10.2.20"

jobs:
  deploy-metallb:
    runs-on: ubuntu-latest
    env:
      KUBE_CONTEXT: ${{ inputs.kube_context }}
      METALLB_VERSION: ${{ inputs.metallb_version }}
      POOL_ADDRESSES: ${{ inputs.pool_addresses }}
      POOL_NAME: ${{ inputs.pool_name }}
      ADV_NAME: ${{ inputs.adv_name }}
      LB_IP: ${{ inputs.loadbalancer_ip }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "latest"

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: "latest"

      - name: Restore KUBECONFIG
        shell: bash
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
          KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG_CONTENT }}
        run: |
          set -euo pipefail
          mkdir -p $HOME/.kube
          if [[ -n "${KUBECONFIG_B64:-}" ]]; then
            echo "$KUBECONFIG_B64" | base64 -d > $HOME/.kube/config
          elif [[ -n "${KUBECONFIG_CONTENT:-}" ]]; then
            echo "$KUBECONFIG_CONTENT" > $HOME/.kube/config
          else
            echo "ERROR: set KUBECONFIG_B64 atau KUBECONFIG_CONTENT" >&2
            exit 1
          fi
          chmod 600 $HOME/.kube/config
          kubectl config use-context "$KUBE_CONTEXT" || true
          kubectl cluster-info || true
          kubectl get nodes -o wide

      - name: Add Helm repos
        run: |
          helm repo add metallb https://metallb.github.io/metallb
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

      # ---- Rancher webhook -> fail-open sementara ----
      - name: (Rancher) Temporarily fail-open validating webhook
        shell: bash
        run: |
          set -euo pipefail
          if kubectl get validatingwebhookconfiguration rancher.cattle.io >/dev/null 2>&1; then
            for i in $(seq 0 19); do
              kubectl patch validatingwebhookconfiguration rancher.cattle.io \
                --type='json' \
                -p="[{'op':'replace','path':'/webhooks/$i/failurePolicy','value':'Ignore'}]" \
                >/dev/null 2>&1 || true
            done
          fi

      - name: Install/Upgrade MetalLB (with CRDs)
        run: |
          set -euo pipefail
          kubectl get ns metallb-system >/dev/null 2>&1 || kubectl create ns metallb-system
          HELM_ARGS=( metallb/metallb -n metallb-system --set crds.enabled=true )
          if [[ "${METALLB_VERSION}" != "latest" ]]; then
            HELM_ARGS+=( --version "${METALLB_VERSION}" )
          fi
          helm upgrade --install metallb "${HELM_ARGS[@]}" --wait --timeout 10m
          kubectl -n metallb-system get deploy,ds,pods -o wide

      - name: Wait MetalLB webhook to be ready
        shell: bash
        run: |
          set -euo pipefail
          echo "Waiting CRDs..."
          for crd in ipaddresspools.metallb.io l2advertisements.metallb.io; do
            kubectl wait --for=condition=Established crd/$crd --timeout=180s
          done
          echo "Waiting controller Available..."
          kubectl -n metallb-system wait deploy/metallb-controller --for=condition=Available --timeout=300s
          echo "Waiting webhook endpoints..."
          for i in {1..60}; do
            EP=$(kubectl -n metallb-system get endpoints metallb-webhook-service -o jsonpath='{.subsets[0].addresses[0].ip}' 2>/dev/null || true)
            [[ -n "${EP}" ]] && { echo "Webhook endpoint: ${EP}"; break; }
            sleep 5
          done

      - name: (Fallback) Temporarily fail-open MetalLB validating webhook
        shell: bash
        run: |
          set -euo pipefail
          if kubectl get validatingwebhookconfiguration metallb-webhook-configuration >/dev/null 2>&1; then
            for i in $(seq 0 19); do
              kubectl patch validatingwebhookconfiguration metallb-webhook-configuration \
                --type='json' \
                -p="[{'op':'replace','path':'/webhooks/$i/failurePolicy','value':'Ignore'}]" \
                >/dev/null 2>&1 || true
            done
          fi

      - name: Install envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - name: Apply IPAddressPool + L2Advertisement (retry)
        shell: bash
        run: |
          set -euo pipefail
          export POOL_NAME POOL_ADDRESSES ADV_NAME
          envsubst < k8s/metallb/ip-pool.yaml.tpl > /tmp/ip-pool.yaml
          echo "--- Applying:"
          cat /tmp/ip-pool.yaml
          n=0
          until kubectl apply -f /tmp/ip-pool.yaml; do
            n=$((n+1))
            [[ $n -ge 5 ]] && { echo "Apply CR gagal setelah retry"; exit 1; }
            echo "Retry apply CR ($n/5)..."; sleep 5
          done
          kubectl -n metallb-system get ipaddresspool,l2advertisement -o yaml

      # ====== AUTODETECT / INSTALL INGRESS CONTROLLER ======
      - name: Detect or install Ingress Controller
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          FOUND_NS=""
          FOUND_SVC=""
          if kubectl -n kube-system get svc traefik >/dev/null 2>&1; then
            FOUND_NS="kube-system"; FOUND_SVC="traefik"
          elif kubectl -n ingress-nginx get svc ingress-nginx-controller >/dev/null 2>&1; then
            FOUND_NS="ingress-nginx"; FOUND_SVC="ingress-nginx-controller"
          elif kubectl -n nginx-ingress get svc nginx-ingress-controller >/dev/null 2>&1; then
            FOUND_NS="nginx-ingress"; FOUND_SVC="nginx-ingress-controller"
          fi

          if [[ -z "$FOUND_NS" ]]; then
            echo "No ingress controller found. Installing ingress-nginx..."
            helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
              -n ingress-nginx --create-namespace \
              --set controller.service.type=LoadBalancer \
              --set controller.service.externalTrafficPolicy=Local \
              --set controller.service.loadBalancerIP="${LB_IP}" \
              --wait --timeout 10m
            FOUND_NS="ingress-nginx"; FOUND_SVC="ingress-nginx-controller"
          fi

          echo "ns=$FOUND_NS"  >> "$GITHUB_OUTPUT"
          echo "svc=$FOUND_SVC" >> "$GITHUB_OUTPUT"
          echo "Detected ingress service: $FOUND_NS/$FOUND_SVC"

      - name: Patch Ingress service to LoadBalancer (idempotent)
        shell: bash
        run: |
          set -euo pipefail
          NS="${{ steps.detect.outputs.ns }}"
          SVC="${{ steps.detect.outputs.svc }}"
          echo "Patching $NS/$SVC to LoadBalancer with IP ${LB_IP}"
          kubectl -n "$NS" patch svc "$SVC" --type merge \
            -p "{\"spec\": {\"type\": \"LoadBalancer\", \"externalTrafficPolicy\": \"Local\", \"loadBalancerIP\": \"${LB_IP}\"}}" || true

          echo "Wait EXTERNAL-IP..."
          for i in {1..60}; do
            kubectl -n "$NS" get svc "$SVC" -o wide
            EXIP=$(kubectl -n "$NS" get svc "$SVC" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            [[ -n "${EXIP}" ]] && break
            sleep 5
          done
          echo "EXTERNAL-IP: ${EXIP:-<none>}"

      # ---- Restore webhooks ----
      - name: Restore MetalLB webhook failurePolicy=Fail
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          if kubectl get validatingwebhookconfiguration metallb-webhook-configuration >/dev/null 2>&1; then
            for i in $(seq 0 19); do
              kubectl patch validatingwebhookconfiguration metallb-webhook-configuration \
                --type='json' \
                -p="[{'op':'replace','path':'/webhooks/$i/failurePolicy','value':'Fail'}]" \
                >/dev/null 2>&1 || true
            done
          fi

      - name: (Rancher) Restore webhook failurePolicy=Fail
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          if kubectl get validatingwebhookconfiguration rancher.cattle.io >/dev/null 2>&1; then
            for i in $(seq 0 19); do
              kubectl patch validatingwebhookconfiguration rancher.cattle.io \
                --type='json' \
                -p="[{'op':'replace','path':'/webhooks/$i/failurePolicy','value':'Fail'}]" \
                >/dev/null 2>&1 || true
            done
          fi

      - name: Summary
        run: |
          echo "Pool   : ${POOL_ADDRESSES} (name=${POOL_NAME})"
          echo "Adv    : ${ADV_NAME}"
          echo "Ingress: ${{ steps.detect.outputs.ns }}/${{ steps.detect.outputs.svc }}"
          kubectl -n "${{ steps.detect.outputs.ns }}" get svc "${{ steps.detect.outputs.svc }}" -o wide || true
